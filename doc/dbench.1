'\" t
.\"     Title: dbench
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.76.1 <http://docbook.sf.net/>
.\"      Date: 10/21/2013
.\"    Manual: dbench: a multiprotocol loadtester.
.\"    Source: dbench
.\"  Language: English
.\"
.TH "DBENCH" "1" "10/21/2013" "dbench" "dbench: a multiprotocol loadte"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
dbench \- Utility to perform loadtesting for multiple protocols\&.
.SH "SYNOPSIS"
.HP \w'\fBdbench\ [\ OPTIONS\ ]\ <num\-clients>\fR\ 'u
\fBdbench [ OPTIONS ] <num\-clients>\fR
.HP \w'\fBdbench\fR\ 'u
\fBdbench\fR [\-B\ \-\-backend=<backend>] [\-t\ \-\-timelimit=<seconds>] [\-\-warmup=<seconds>] [\-c\ \-\-loadfile=<filename>] [\-R\ \-\-targe\-trate=<throughput>] [\-\-trunc\-io=<size>] [\-\-run\-once] [\-\-skip\-cleanup] [\-\-machine\-readable] [\-\-iscsi=<iSCSI\ url>] [\-\-iscsi\-initiatorname=<iqn\ name>] [\-\-nfs=<nfs\ url>] [\-\-smb\-share=<//SERVER/SHARE>] [\-\-smb\-user=<user%password>] [\-\-scsi=<device>] [\-\-allow\-scsi\-writes]
.SH "DESCRIPTION"
.PP
Dbench is a utility to loadtest network server\&. Dbench currently supports iSCSI, NFSv3, SCSI and SMB\&.
.SH "OPTIONS"
.PP
\-B \-\-backend=<iscsi|nfs|scsi|smb>
.RS 4
This specifies which protocol to test with\&. Supported protocols are iscsi, nfsv3, scsi and smbv1
.RE
.PP
\-t \-\-timelimit=<seconds>
.RS 4
For how long to run the test\&. This argument is mutually exclusive with \-\-run\-once\&.
.RE
.PP
\-\-warmup=<seconds>
.RS 4
Before starting to record throughput and latencies dbench will first wait until all clients are running and then wait for the target and its caches to warm up before it starts collecting data\&.
.sp
Setting warmup to 0 means not warmup and dbench will start running the test immediately\&.
.RE
.PP
\-c \-\-loadfile=<filename>
.RS 4
The loadfile is the script for the commands to run during the test\&. This command is mandatory\&.
.sp
The loadfile is the script for the commands to run during the test\&. This command is mandatory\&. The content of this file depends on the backend protocol that is beeing tested\&. See the protocol specific sections below for the commands that apply to the backends\&.
.RE
.PP
\-R \-\-targetrate=<throughput>
.RS 4
If the target rate is used dbench will try to keep each client running at the indicated throughput rate by adjusting a delta that the dbench thread will sleep between commands\&.
.sp
This is mainly useful for capacity testing of a known workload\&. By using this argument it is possible to run each thread to match the timings for the specific workload\&. By increasing the number of threads until the target can no longer keep up it is possible to measure how many clents/threads the target can service before it becomes saturated and it can no longer keep up\&.
.RE
.PP
\-\-trunc\-io=<integer>
.RS 4
Some targets may have limits on the size of I/O they can accept\&. This argument will clamp all I/O read from the loadfile to not exceed this value\&. This is mainly useful for using generic loadfiles against targets that can not handle the I/O size\&.
.RE
.PP
\-\-run\-once
.RS 4
Run the workload exactly once for each thread and exit the test once all threads have finished\&. This option is mutualy exclusive with \-\-timelimit\&.
.RE
.PP
\-\-skip\-cleanup
.RS 4
When the test is finished dbench will try to clean up the export used by recursively deleting the "/clients" directory tree\&. If you don\*(Aqt use "/clients/client*" style filenames or if you don\*(Aqt want dbench to delete the files after the test is complete use \-\-skip\-cleanup\&.
.RE
.PP
\-\-machine\-readable
.RS 4
Output data during in a more machine friendly format\&.
.RE
.PP
\-\-iscsi=<iSCSI url>
.RS 4
iSCSI url for the target to connect to\&. The url format is : iscsi://[<username>[%<password>]@]<host>[:<port>]/<target\-iqn>/<lun>
.sp
Username and password are only required if the target requires CHAP authentication\&. Optionally you can specify the username and password using the environment variables LIBISCSI_CHAP_USERNAME and LIBISCSI_CHAP_PASSWORD\&.
.sp
Host can be specified either as a hostname, an IPv4 address or an IPv6 address\&. Examples:
.sp
.if n \{\
.RS 4
.\}
.nf
	      iscsi://192\&.0\&.2\&.1/iqn\&.ronnie\&.test/1
	      iscsi://[2001:DB8::1]:3261/iqn\&.ronnie\&.test/1
	      iscsi://ronnie%password@iscsi\&.example\&.com/iqn\&.ronnie\&.test/1
	    
.fi
.if n \{\
.RE
.\}
.sp
This argument is only valid with iSCSI backend\&.
.RE
.PP
\-\-iscsi\-initiatorname=<iqn name>
.RS 4
iSCSI initatorname to use when connecting to the target\&.
.sp
This argument is only valid with iSCSI backend\&.
.RE
.PP
\-\-nfs=<NFS url>
.RS 4
NFS url for the target to connect to\&. The url format is : nfs://<server>/<path\-of\-export>
.sp
This argument is only valid with NFS backend\&.
.RE
.PP
\-\-scsi=<SCSI device>
.RS 4
Device name for the device to test\&.
.sp
This argument is only valid with SCSI backend\&.
.RE
.PP
\-\-allow\-scsi\-write
.RS 4
Allow sending medium write commands to the device\&.
.sp
This argument is only valid with SCSI backend\&.
.RE
.PP
\-\-smb\-share=<//SERVER/SHARE>
.RS 4
Server and share to connect to for the SMB backend\&.
.sp
This argument is only valid with SMB backend\&.
.RE
.PP
\-\-smb\-user=<user%password>
.RS 4
Username and password to authenticate to the SMB server with\&.
.sp
This argument is only valid with SMB backend\&.
.RE
.SH "COMMON LOADFILE COMMANDS"
.PP
These commands are available for all backends and can be used to create loops, random file names and more\&.
.PP
<timing> Deltree <path> <status>
.RS 4
Deltree is used to recursively delete the file system tree used for the test\&. This command is commonly used as the very first command in the loadfile and then to delete any residual files that might be still present from a previous failed test run\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
# DELTREE if we want to delete the client directory everytime we restart 
# the script\&. Remove these two lines if the script is only "read\-only"
# reading from pre\-existing files in the /clients/clientX/ tree
0\&.000 Deltree "/clients/client1" 0x00000000
	    
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
RANDOMSTRING <index> <string>
.RS 4
RANDOMSTRING is used to create random strings, for example strings that are to be used as randomly generated filenames\&. The string is formed by replacing every occurance of [<set>] with one randomly picked letter from the specified set\&.
.sp
The string index must be a number from 1 to 9 and it can later be referenced from file\-name manipulating commands using $<number>\&.
.RE
.PP
LOOP <count> / ENDLOOP
.RS 4
.PP
LOOP and ENDLOOP can be used to interate a set number of times of a range of commands in the loadfile\&. LOOP/ENDLOOP can nest\&.
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
RANDOMSTRING 1 "/test[0123456789][01234567890]\&.file"
#
# The LOOP/ENDLOOP construct will loop over an entire section of
# the loadfile
#
LOOP 5
CREATE3 $1 *
LOOKUP3 $1 0x00000000
WRITE3 $1 0 1024 0 0x00000000
WRITE3 $1 1024 1024 0 0x00000000
ENDLOOP
	    
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
REPEAT <count>
.RS 4
REPEAT is used to interate over the following line the specified number of times\&.
.RE
.PP
WRITEPATTERN <count>
.RS 4
.PP
WRITEPATTERN is used to specify the data to write\&. This is a string of characters that will be repeated to fill the buffer to be written\&.
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
MKDIR3 "/clients" *
MKDIR3 "/clients/client1" *
LOOKUP3 "/clients/client1" 0x00000000
#
#
# Writepattern sets the pattern to write\&. This pattern is repeated
# to fill the write buffer\&.
#
WRITEPATTERN 1234567890
CREATE3  "/clients/client1/test\&.file" 0x00000000
WRITE3 "/clients/client1/test\&.file" 0 32768 0 0x00000000
REPEAT 1000
WRITE3 "/clients/client1/test\&.file" +32768 32768 0 0x00000000
COMMIT3 "/clients/client1/test\&.file" 0x00000000
	    
.fi
.if n \{\
.RE
.\}
.sp
.RE
.SH "LOADFILE VALUE MODIFIERS"
.PP
Loadfile arguments can be specified either as absolute numbers or as simple expressions\&.
.sp
.if n \{\
.RS 4
.\}
.nf
The modifiers are:
\*(Aq*\*(Aq followed by zero or more qualifiers :

\*(Aq*\*(Aq    : A random 64 bit integer\&.
\*(Aq/yyy\*(Aq : align the number to yyy\&. This is the same as x = (x/y)*y
\*(Aq%yyy\*(Aq : modulo yyy\&. This is the same as x = x%y
\*(Aq+yyy\*(Aq : Add y

Examples :
\*(Aq*\*(Aq         A random offset between 0 and file size\&.
\*(Aq*/0x1000\*(Aq  A random offset aligned to a page boundary (4096)\&.
\*(Aq*/0x1000%5000000\*(Aq A random offset between 0 and 500000 aligned to page boundary\&.
\*(Aq*%100+25\*(Aq  A random offset between 25 and 124\&.

You can also use \*(Aq+\*(Aq on its own which means to take the previous value and just adding an offset to it :
Examples :
\*(Aq+4096\*(Aq    Take the previous value for this argument and add 4096 to it\&.

Example: Sequential read of 100x 4kb
READ3 "/foo\&.dbench" 0 4096 0x00000000
REPEAT 99
READ3 "/foo\&.dbench" +4096 4096 0x00000000
    
.fi
.if n \{\
.RE
.\}
.PP
.SH "NFS LOADFILE COMMANDS"
.PP
<timing> ACCESS3 <path> 0 0 <status>
.RS 4
Send a NFSv3 ACCESS3 command to the server\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
	      0\&.000 ACCESS3 "/" 0 0 0x00000000
	    
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
<timing> COMMIT3 <path> <status>
.RS 4
Send a NFSv3 COMMIT3 command to the server\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
	      0\&.000 COMMIT3 "/some\-file" 0x00000000
	    
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
<timing> CREATE3 <path> <status>
.RS 4
Send a NFSv3 CREATE3 command to the server\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
	      0\&.000 CREATE3 "/some\-file" 0x00000000
	    
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
<timing> FSINFO3 <status>
.RS 4
Send a NFSv3 FSINFO3 command to the server\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
	      0\&.000 FSINFO3 0x00000000
	    
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
<timing> FSSTAT3 <status>
.RS 4
Send a NFSv3 FSSTAT3 command to the server\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
	      0\&.000 FSSTAT3 0x00000000
	    
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
<timing> GETATTR3 <path> <status>
.RS 4
Send a NFSv3 GETATTR3 command to the server\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
	      0\&.000 GETATTR3 "/some\-file" 0x00000000
	    
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
<timing> LINK3 <path> <path> <status>
.RS 4
Send a NFSv3 LINK3 command to the server\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
	      0\&.000 LINK3 "/hard\-link" "/original\-file" 0x00000000
	    
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
<timing> LOOKUP3 <path> <status>
.RS 4
Send a NFSv3 LOOKUP3 command to the server\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
	      0\&.000 LOOKUP3 "/some\-file" 0x00000000
	    
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
<timing> MKDIR3 <path> <status>
.RS 4
Send a NFSv3 MKDIR3 command to the server\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
	      0\&.000 MKDIR3 "/some\-file" 0x00000000
	    
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
<timing> PATHCONF3 <path> <status>
.RS 4
Send a NFSv3 PATHCONF3 command to the server\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
	      0\&.000 PATHCONF3 "/some\-file" 0x00000000
	    
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
<timing> READDIRPLUS3 <path> <status>
.RS 4
Send a NFSv3 READDIRPLUS3 command to the server\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
	      0\&.000 READDIRPLUS3 "/some\-directory" 0x00000000
	    
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
<timing> READ3 <path> <offset> <length> <status>
.RS 4
Send a NFSv3 READ3 command to the server\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
	      0\&.000 READ3 "/some\-file" 0 4096 0x00000000
	    
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
<timing> READLINK3 <path> <status>
.RS 4
Send a NFSv3 READLINK3 command to the server\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
	      0\&.000 READLINK3 "/some\-link" 0x00000000
	    
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
<timing> REMOVE3 <path> <status>
.RS 4
Send a NFSv3 REMOVE3 command to the server\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
	      0\&.000 REMOVE3 "/some\-directory" 0x00000000
	    
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
<timing> RENAME3 <old\-path> <new\-path> <status>
.RS 4
Send a NFSv3 RENAME3 command to the server\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
	      0\&.000 RENAME3 "/old\-name" "/new\-name"  0x00000000
	    
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
<timing> RMDIR3 <path> <status>
.RS 4
Send a NFSv3 RMDIR3 command to the server\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
	      0\&.000 RMDIR3 "/some\-directory" 0x00000000
	    
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
<timing> SYMLINK3 <path> <path> <status>
.RS 4
Send a NFSv3 SYMLINK3 command to the server\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
	      0\&.000 SYMLINK3 "/sym\-link" "/original\-file" 0x00000000
	    
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
<timing> WRITE3 <path> <offset> <length> <stable> <status>
.RS 4
Send a NFSv3 WRITE3 command to the server\&.
.sp
Example:
.sp
.if n \{\
.RS 4
.\}
.nf
	      0\&.000 WRITE3 "/some\-file" 0 4096 2 0x00000000
	    
.fi
.if n \{\
.RE
.\}
.sp
.RE
.SH "NFS EXAMPLES"
.PP
Sequential 4kb Reads
.RS 4
.PP
To read a file sequentially 4kbyte at a time:
.sp
.if n \{\
.RS 4
.\}
.nf
READ3 "/foo\&.dbench" 0 4096 0x00000000
REPEAT 999999
READ3 "/foo\&.dbench" +4096 4096 0x00000000

dbench \-B nfs \-\-loadfile=nfs\&.txt \-\-skip\-cleanup \-\-warmup=0 \-\-nfs nfs://127\&.0\&.0\&.1/data/tmp \-\-run\-once 1
	
.fi
.if n \{\
.RE
.\}
.sp
.RE
.PP
Random 4kb Reads
.RS 4
.PP
To read a file randomly 4kbyte at a time within the range 0 to 1G :
.sp
.if n \{\
.RS 4
.\}
.nf
REPEAT 999999
READ3 "/foo\&.dbench" */4096%1000000000 4096 0x00000000

dbench \-B nfs \-\-loadfile=nfs\&.txt \-\-skip\-cleanup \-\-warmup=0 \-\-nfs nfs://127\&.0\&.0\&.1/data/tmp \-\-run\-once 1
	
.fi
.if n \{\
.RE
.\}
.sp
.RE
.SH "SEE ALSO"
.PP
dbench(1)
\m[blue]\fB\%http://github.com/sahlberg/dbench\fR\m[]
